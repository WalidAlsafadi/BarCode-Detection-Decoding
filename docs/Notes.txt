Include a diagram or flowchart of the barcode detection pipeline

I want to extract the preprocessing images for each step, raw, grayscale, binary image after thresholding, the processed image after morphological.

preprocess.py
import cv2
import numpy as np

def preprocess_image(image_path):
    """
    Preprocess the image to enhance barcode detection.
    Steps:
    1. Load the image and convert it to grayscale.
    2. Compute gradients to highlight vertical structures.
    3. Apply Gaussian blur and binary thresholding.
    4. Perform morphological operations to close gaps in the barcode.
    5. Remove noise through erosion and dilation.

    Args:
        image_path (str): Path to the image file.

    Returns:
        numpy.ndarray: Preprocessed binary image or None if the image cannot be loaded.
    """
    # Load the image
    image = cv2.imread(image_path)
    if image is None:
        print(f"[ERROR] Could not load image: {image_path}")
        return None

    # Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Compute gradients in the x-direction
    gradX = cv2.Sobel(gray, ddepth=cv2.CV_32F, dx=1, dy=0, ksize=-1)
    gradX = cv2.convertScaleAbs(gradX)

    # Apply Gaussian blur and binary threshold
    blurred = cv2.GaussianBlur(gradX, (5, 5), 0)
    _, binary = cv2.threshold(blurred, 225, 255, cv2.THRESH_BINARY)

    # Perform morphological transformations to close gaps
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (27, 7))
    closed = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)

    # Remove noise using erosion and dilation
    closed = cv2.erode(closed, None, iterations=4)
    closed = cv2.dilate(closed, None, iterations=4)

    return closed

test_preprocess.py
import os
import cv2

# Add the project root to the Python path
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))

from src.preprocess import preprocess_image  # Standard import from the src module

# Define test paths
TEST_IMAGE_PATH = os.path.join("data/raw/05102009146.jpg")
DEBUG_DIR = os.path.join("tests/test_images/")
DEBUG_PROCESSED_PATH = os.path.join(DEBUG_DIR, "debug_preprocessed.jpg")

def test_preprocess_image():
    """
    Test the image preprocessing function.
    Ensures the function processes the image correctly and saves the result.
    """
    # Ensure debug directory exists
    os.makedirs(DEBUG_DIR, exist_ok=True)

    # Call preprocess_image and validate output
    processed_image = preprocess_image(TEST_IMAGE_PATH)
    assert processed_image is not None, "[ERROR] Preprocessed image is None!"
    assert processed_image.size > 0, "[ERROR] Preprocessed image is empty!"

    # Save debug preprocessed image
    cv2.imwrite(DEBUG_PROCESSED_PATH, processed_image)
    assert os.path.exists(DEBUG_PROCESSED_PATH), "[ERROR] Debug preprocessed image was not saved!"

    print("[SUCCESS] Preprocessing test completed successfully!")
    print(f"[INFO] Debug preprocessed image saved at: {DEBUG_PROCESSED_PATH}")

if __name__ == "__main__":
    test_preprocess_image()

and the same time I don't want to ruin the project. how I got get them safely without making issues?
